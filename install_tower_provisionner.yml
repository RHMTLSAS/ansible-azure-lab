---
- name: Setup Tower Node
  hosts: tower
  vars:
    ansible_tower_install: false
    ansible_tower_basename: "ansible-tower-setup"
    ansible_tower_version: "3.2.7"
    ansible_tower_archive: "{{ ansible_tower_basename }}-{{ ansible_tower_version }}.tar.gz"
    ansible_tower_release_url: "http://releases.ansible.com/ansible-tower/setup/{{ ansible_tower_archive }}"
  tasks:
    - name:
      get_url:
        dest: /var/tmp # required. Absolute path of where to download the file to.,If C(dest) is a directory, either the server provided filename or, if none provided, the base name of the URL on the remote server will be used. If a directory, C(force) has no effect.,If C(dest) is a directory, the file will always be downloaded (regardless of the C(force) option), but replaced only if the contents changed..
        url: "{{ ansible_tower_release_url }}" # required. HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path
      register: get_tower
    - name: extract 
      unarchive:
        dest: /var/tmp/ # required. Remote absolute path where the archive should be unpacked.
        src: "/var/tmp/{{ ansible_tower_archive }}" # required. If C(remote_src=no) (default), local path to archive file to copy to the target server; can be absolute or relative. If C(remote_src=yes), path on the target server to existing archive file to unpack.,If C(remote_src=yes) and C(src) contains C(://), the remote machine will download the file from the URL first. (version_added 2.0). This is only for simple cases, for full download support use the M(get_url) module.
        remote_src: yes # not required. Set to C(yes) to indicate the archived file is already on the remote system and not local to the Ansible controller.,This option is mutually exclusive with C(copy).
      when: get_tower.changed
    - name: fix the password
      replace:
        path: "/var/tmp/{{ ansible_tower_basename }}-{{ ansible_tower_version }}/inventory" 
        regexp: "^(.*)_password=''" 
        replace: "\\1_password='ansible'"
      when: get_tower.changed
        
    - name: Install tower
      command: "/var/tmp/{{ ansible_tower_basename }}-{{ ansible_tower_version }}/setup.sh"
      when: get_tower.changed or ansible_tower_install != false 

    - name: Install tower
      yum: pkg={{item}} state=installed
      with_items:
        - python2-pip
        - python2-winrm
        - python2-requests
